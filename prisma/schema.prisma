generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  customerNumber         Int        @id
  customerName           String     @db.VarChar(50)
  contactLastName        String     @db.VarChar(50)
  contactFirstName       String     @db.VarChar(50)
  phone                  String     @db.VarChar(50)
  addressLine1           String     @db.VarChar(50)
  addressLine2           String?    @db.VarChar(50)
  city                   String     @db.VarChar(50)
  state                  String?    @db.VarChar(50)
  postalCode             String?    @db.VarChar(15)
  country                String     @db.VarChar(50)
  salesRepEmployeeNumber Int?
  creditLimit            Decimal?   @db.Decimal(10, 2)
  employees              Employee? @relation(fields: [salesRepEmployeeNumber], references: [employeeNumber], onDelete: NoAction, onUpdate: NoAction, map: "customers_ibfk_1")
  orders                 Order[]
  payments               Payment[]

  @@index([salesRepEmployeeNumber], map: "salesRepEmployeeNumber")
  @@map("customers")
}

model Employee {
  employeeNumber  Int         @id
  lastName        String      @db.VarChar(50)
  firstName       String      @db.VarChar(50)
  extension       String      @db.VarChar(10)
  email           String      @db.VarChar(100)
  officeCode      String      @db.VarChar(10)
  reportsTo       Int?
  jobTitle        String      @db.VarChar(50)
  customers       Customer[]
  employees       Employee?  @relation("employeesToemployees", fields: [reportsTo], references: [employeeNumber], onDelete: NoAction, onUpdate: NoAction, map: "employees_ibfk_1")
  other_employees Employee[] @relation("employeesToemployees")
  offices         Office     @relation(fields: [officeCode], references: [officeCode], onDelete: NoAction, onUpdate: NoAction, map: "employees_ibfk_2")

  @@index([officeCode], map: "officeCode")
  @@index([reportsTo], map: "reportsTo")
  @@map("employees")
}

model Office {
  officeCode   String      @id @db.VarChar(10)
  city         String      @db.VarChar(50)
  phone        String      @db.VarChar(50)
  addressLine1 String      @db.VarChar(50)
  addressLine2 String?     @db.VarChar(50)
  state        String?     @db.VarChar(50)
  country      String      @db.VarChar(50)
  postalCode   String      @db.VarChar(15)
  territory    String      @db.VarChar(10)
  employees    Employee[]

  @@map("offices")
}

model OrderDetail {
  orderNumber     Int
  productCode     String   @db.VarChar(15)
  quantityOrdered Int
  priceEach       Decimal  @db.Decimal(10, 2)
  orderLineNumber Int      @db.SmallInt
  orders          Order  @relation(fields: [orderNumber], references: [orderNumber], onDelete: NoAction, onUpdate: NoAction, map: "orderdetails_ibfk_1")
  products        Product @relation(fields: [productCode], references: [productCode], onDelete: NoAction, onUpdate: NoAction, map: "orderdetails_ibfk_2")

  @@id([orderNumber, productCode])
  @@index([productCode], map: "productCode")
  @@map("orderdetails")
}

model Order {
  orderNumber    Int            @id
  orderDate      DateTime       @db.Date
  requiredDate   DateTime       @db.Date
  shippedDate    DateTime?      @db.Date
  status         String         @db.VarChar(15)
  comments       String?        @db.Text
  customerNumber Int
  orderdetails   OrderDetail[]
  customers      Customer      @relation(fields: [customerNumber], references: [customerNumber], onDelete: NoAction, onUpdate: NoAction, map: "orders_ibfk_1")

  @@index([customerNumber], map: "customerNumber")
  @@map("orders")
}

model Payment {
  customerNumber Int
  checkNumber    String    @db.VarChar(50)
  paymentDate    DateTime  @db.Date
  amount         Decimal   @db.Decimal(10, 2)
  customers      Customer @relation(fields: [customerNumber], references: [customerNumber], onDelete: NoAction, onUpdate: NoAction, map: "payments_ibfk_1")

  @@id([customerNumber, checkNumber])
  @@map("payments")
}

model ProductLine {
  productLine     String     @id @db.VarChar(50)
  textDescription String?    @db.VarChar(4000)
  htmlDescription String?    @db.MediumText
  image           Bytes?     @db.MediumBlob
  products        Product[]

  @@map("productlines")
}

model Product {
  productCode        String         @id @db.VarChar(15)
  productName        String         @db.VarChar(70)
  productLine        String         @db.VarChar(50)
  productScale       String         @db.VarChar(10)
  productVendor      String         @db.VarChar(50)
  productDescription String         @db.Text
  quantityInStock    Int            @db.SmallInt
  buyPrice           Decimal        @db.Decimal(10, 2)
  MSRP               Decimal        @db.Decimal(10, 2)
  orderdetails       OrderDetail[]
  productlines       ProductLine   @relation(fields: [productLine], references: [productLine], onDelete: NoAction, onUpdate: NoAction, map: "products_ibfk_1")

  @@index([productLine], map: "productLine")
  @@map("products")
}
